We're building a web game where everybody wins and we are all friends forever.
It's simple—you click on one of three boxes to see what nice thing you've
won.You always win something nice.Because we love you. Here's what we have so
far. Something's going wrong though.Can you tell what it is ?


<!DOCTYPE html>
<html>
  <body>
    <button id="btn-0">Button 1</button>
    <button id="btn-1">Button 2</button>
    <button id="btn-2">Button 3</button>
  </body>
  <script type="text/javascript">
    const prizes = ['A Unicorn!', 'A Hug!', 'Fresh Laundry!'];
    for (var btnNum = 0; btnNum < prizes.length; {

                    // For each of our buttons, when the user clicks it...
        document.getElementById(`btn-${btnNum}`).onclick = () => {
        // Tell her what she's won!
                alert(prizes[btnNum]);
        };
    }
  </script>
</html>

/*** * When a function accesses a variable outside its scope, it accesses that
variable, not a frozen copy. So when the value held by the variable changes, the
function gets that new value. By the time the user starts pressing buttons, our
loop will have already completed and btnNum will be 3, so this is what each of
our anonymous functions will get for btnNum! * Why 3? The for loop will
increment btnNum until the conditional in the middle is no longer met—that is,
until it's not true that btnNum < prizes.length. So the code in the for loop
won't run with btnNum=3, but btnNum will be 3 when the loop is done. Why
undefined? prizes has 3 elements, but they are at indices 0,1,2. Array indices
start at 0, remember? (Write this down—forgetting this is an easy way to create
an off-by-one error in a whiteboard interview.) In JavaScript, accessing a
nonexistent index in an array returns undefined (Python throws an IndexError,
but Ruby returns nil). **/ 

/**
*  // closure is a function bundled with its lexical environment
*  // when a function is returns , its returns the function + its lexcical scope bundled together
*/

/**
* The Solution We can solve this by wrapping
* our anonymous function in another anonymous function that takes btnNum as an
* argument. Like so:
* One important property of primitives in JS is that when they are passed as arguments to a function,
* they are copied ("passed by value"). So for example:
* In contrast, when a function takes an object, it actually takes a reference to that very object.
* So changes you make to the object in the function persist after the function is done running.
* This is sometimes called a side effect.

<script type="text/javascript">
  const prizes = ['A Unicorn!', 'A Hug!', 'Fresh Laundry!'];
  for (var btnNum = 0; btnNum < prizes.length; btnNum++) {
    // For each of our buttons, when the user clicks it...
    document.getElementById(`btn-${btnNum}`).onclick = ((frozenBtnNum) => {
      return () => {
        // Tell her what she's won!
        alert(prizes[frozenBtnNum]);
      };
    })(btnNum); // LOOK! We're passing btnNum to our anonymous function here!
  }
</script>
**/